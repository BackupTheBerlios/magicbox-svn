diff -Nru linux-2.4.32/drivers/mtd/maps/Config.in linux-2.4.32-magicmap/drivers/mtd/maps/Config.in
--- linux-2.4.32/drivers/mtd/maps/Config.in	2003-11-30 23:47:31.000000000 +0100
+++ linux-2.4.32-magicmap/drivers/mtd/maps/Config.in	2006-03-10 23:29:37.000000000 +0100
@@ -45,6 +45,7 @@
    dep_tristate '  CFI Flash device mapped on D-Box2' CONFIG_MTD_DBOX2 $CONFIG_MTD_CFI
    dep_tristate '  CFI Flash device mapping on FlagaDM' CONFIG_MTD_CFI_FLAGADM $CONFIG_MTD_CFI
    dep_tristate '  CFI Flash device mapped on IBM Redwood-4/5' CONFIG_MTD_REDWOOD $CONFIG_MTD_CFI
+   dep_tristate '  CFI Flash device mapped on MagicBox' CONFIG_MTD_MAGICMAP $CONFIG_MTD_CFI
 fi
 
 if [ "$CONFIG_MIPS" = "y" ]; then
diff -Nru linux-2.4.32/drivers/mtd/maps/Makefile linux-2.4.32-magicmap/drivers/mtd/maps/Makefile
--- linux-2.4.32/drivers/mtd/maps/Makefile	2003-11-30 23:47:31.000000000 +0100
+++ linux-2.4.32-magicmap/drivers/mtd/maps/Makefile	2006-03-10 23:29:32.000000000 +0100
@@ -58,6 +58,7 @@
 obj-$(CONFIG_MTD_IMPA7)		+= impa7.o
 obj-$(CONFIG_MTD_FORTUNET)	+= fortunet.o
 obj-$(CONFIG_MTD_REDWOOD)	+= redwood.o
+obj-$(CONFIG_MTD_MAGICMAP)	+= magicmap.o
 obj-$(CONFIG_MTD_UCLINUX)	+= uclinux.o
 obj-$(CONFIG_MTD_NETtel)	+= nettel.o
 obj-$(CONFIG_MTD_SCB2_FLASH)	+= scb2_flash.o
diff -Nru linux-2.4.32/drivers/mtd/maps/magicmap.c linux-2.4.32-magicmap/drivers/mtd/maps/magicmap.c
--- linux-2.4.32/drivers/mtd/maps/magicmap.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.32-magicmap/drivers/mtd/maps/magicmap.c	2006-03-10 23:26:36.000000000 +0100
@@ -0,0 +1,174 @@
+/*
+ * magicmap.c: memory map for magicbox board.
+ * Copyright (C) 2006  Karol Lewandowski
+ *
+ * Heavily based[1] on redwood.c.
+ * 
+ * [1] s/redwood/magicmap/g;
+ *
+ *
+ * Original information:
+ * redwood.c - mapper for IBM Redwood-4/5 board.
+ *	
+ * Copyright 2001 MontaVista Softare Inc. 
+ *  
+ * This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.    
+ *  
+ *  THIS  SOFTWARE  IS PROVIDED   ``AS  IS'' AND   ANY  EXPRESS OR   IMPLIED
+ *  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF
+ *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
+ *  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT,  INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ *  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF
+ *  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ *  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT
+ *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *  
+ *  You should have received a copy of the  GNU General Public License along
+ *  with this program; if not, write  to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ *  History: 12/17/2001 - Armin
+ *  		migrated to use do_map_probe
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+
+#include <asm/io.h>
+
+#define WINDOW_ADDR 0xffc00000
+#define WINDOW_SIZE 0x00400000
+
+__u8 magicmap_flash_read8(struct map_info *map, unsigned long ofs)
+{
+        return *(__u8 *)(map->map_priv_1 + ofs);
+}
+
+__u16 magicmap_flash_read16(struct map_info *map, unsigned long ofs)
+{
+        return *(__u16 *)(map->map_priv_1 + ofs);
+}
+
+__u32 magicmap_flash_read32(struct map_info *map, unsigned long ofs)
+{
+        return *(volatile unsigned int *)(map->map_priv_1 + ofs);
+}
+
+void magicmap_flash_copy_from(struct map_info *map, void *to,
+                             unsigned long from, ssize_t len)
+{
+        memcpy(to, (void *)(map->map_priv_1 + from), len);
+}
+
+void magicmap_flash_write8(struct map_info *map, __u8 d, unsigned long adr)
+{
+        *(__u8 *)(map->map_priv_1 + adr) = d;
+}
+
+void magicmap_flash_write16(struct map_info *map, __u16 d, unsigned long adr)
+{
+        *(__u16 *)(map->map_priv_1 + adr) = d;
+}
+
+void magicmap_flash_write32(struct map_info *map, __u32 d, unsigned long adr)
+{
+        *(__u32 *)(map->map_priv_1 + adr) = d;
+}
+
+void magicmap_flash_copy_to(struct map_info *map, unsigned long to,
+                           const void *from, ssize_t len)
+{
+        memcpy((void *)(map->map_priv_1 + to), from, len);
+}
+
+struct map_info magicmap_flash_map = {
+        name: "Magicmap",
+        size: WINDOW_SIZE,
+        buswidth: 2,
+        read8: magicmap_flash_read8,
+        read16: magicmap_flash_read16,
+        read32: magicmap_flash_read32,
+        copy_from: magicmap_flash_copy_from,
+        write8: magicmap_flash_write8,
+        write16: magicmap_flash_write16,
+        write32: magicmap_flash_write32,
+        copy_to: magicmap_flash_copy_to
+};
+
+
+static struct mtd_partition magicmap_flash_partitions[] = {
+        {
+                name: "kernel",
+                offset: 0,
+                size:   0x0e0000,
+        },
+        {
+                name: "ramdisk",
+                offset: 0x0e0000,
+                size:   0x2c0000
+        },
+        {
+                name: "persistent",
+                offset: 0x3a0000,
+                size:   0x020000
+        },
+        {
+                name: "bootloader",
+                offset: 0x3c0000,
+                size:   0x040000,
+                mask_flags: MTD_WRITEABLE       /* force read-only */
+        },
+};
+
+#define NUM_MAGICMAP_FLASH_PARTITIONS \
+        (sizeof(magicmap_flash_partitions)/sizeof(magicmap_flash_partitions[0]))
+
+static struct mtd_info *magicmap_mtd;
+
+int __init init_magicmap_flash(void)
+{
+        printk(KERN_NOTICE "magicmap: Magically mapped flash: %x at %x\n",
+               WINDOW_SIZE, WINDOW_ADDR);
+
+        magicmap_flash_map.map_priv_1 =
+                (unsigned long)ioremap(WINDOW_ADDR, WINDOW_SIZE);
+
+        if (!magicmap_flash_map.map_priv_1) {
+                printk("init_magicmap_flash: failed to ioremap\n");
+                return -EIO;
+        }
+
+        magicmap_mtd = do_map_probe("cfi_probe", &magicmap_flash_map);
+
+        if (magicmap_mtd) {
+                magicmap_mtd->module = THIS_MODULE;
+                return add_mtd_partitions(magicmap_mtd,
+                                          magicmap_flash_partitions,
+                                          NUM_MAGICMAP_FLASH_PARTITIONS);
+        }
+
+        return -ENXIO;
+}
+
+static void __exit cleanup_magicmap_flash(void)
+{
+        if (magicmap_mtd) {
+                del_mtd_partitions(magicmap_mtd);
+                iounmap((void *)magicmap_flash_map.map_priv_1);
+                map_destroy(magicmap_mtd);
+        }
+}
+
+module_init(init_magicmap_flash);
+module_exit(cleanup_magicmap_flash);
